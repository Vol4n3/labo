"use strict";var _NeuralNetwork=require("./NeuralNetwork");console.info("ml5 version:",ml5.version),new _NeuralNetwork.NeuralNetwork("blabla",2);let isCapture=!1;const elementContainer=document.getElementById("capture"),canvas=document.createElement("canvas"),resize=function(){canvas.width=elementContainer.clientWidth,canvas.height=elementContainer.clientHeight};resize();const ctx=canvas.getContext("2d");elementContainer.appendChild(canvas);class Point{constructor(a,b){this.a=a,this.b=b}}class Segment{constructor(a,b,c,d){this.a=a,this.b=b,this.c=c,this.d=d}draw(){let a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:0,b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:0;ctx.beginPath(),ctx.moveTo(this.x1-a,this.y1-b),ctx.lineTo(this.x2-a,this.y2-b),ctx.stroke(),ctx.closePath()}}class Path{constructor(){let a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:[];this.a=a}}let capturedPoints=[];const path=new Path,drawPath=()=>{drawLines(path.segments)},drawLines=a=>{let b,c;a.forEach(a=>{b="undefined"==typeof b?a.x1:b>a.x1?a.x1:b,b="undefined"==typeof b?a.x2:b>a.x2?a.x2:b,c="undefined"==typeof c?a.y1:c>a.y1?a.y1:c,c="undefined"==typeof c?a.y2:c>a.y2?a.y2:c}),a.forEach(a=>{a.draw(),a.draw(b,c)})};window.addEventListener("mousedown",()=>{isCapture=!0,capturedPoints=[]}),window.addEventListener("mouseup",()=>{isCapture=!1,ctx.clearRect(0,0,canvas.width,canvas.height),path.segments.push(...makePath(capturedPoints)),drawPath()}),elementContainer.addEventListener("mousemove",a=>{isCapture&&capturedPoints.push(new Point(a.x,a.y))});const makePath=a=>{const b=[],c=function(){var d=Math.PI;let e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0;const f=endIndexAngleChange(a,e,d/4),g=a[e],h=a[f];g&&h&&b.push(new Segment(g.x,g.y,h.x,h.y)),f<a.length-1&&c(f)};return c(),b},endIndexAngleChange=(a,b,c)=>{var d=Math.abs;let e,f,g,h=0;for(g=b;g<a.length;g++){if(f){const b=getAngle(f,a[g]);if(e&&(h+=e-b),e=b,d(h)>c)return g}f=a[g]}return g-1},getAngle=(a,b)=>Math.atan2(b.y-a.y,b.x-a.x);